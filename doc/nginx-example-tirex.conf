http {
  
  [...]
  
 lua_package_path "/path/to/lua-nginx-osm/?.lua;;";
 lua_shared_dict osm_tirex 10m; # mandatory to use osm.tirex module
 lua_socket_log_errors off;

 server {
  listen 80;
  server_name tileserver;
  root   /var/www;

  location / {
    access_by_lua '
        local osm_tile = require 'osm.tile'
        local minz = 0
        local maxz = 18
        local x, y, z = osm_tile.get_cordination(ngx.var.uri, "", "png")
        local ok = osm_tile.check_integrity_xyzm(x, y, z, minz, maxz)
        if not ok then
            ngx.exit(ngx.HTTP_FORBIDDEN)
        end
    ';

    content_by_lua '
        local osm_tile = require "osm.tile"
        local tirex = require "osm.tirex"
        local tirex_tilepath = "/var/lib/tirex/tiles/"
        local map = "example"
        local x, y, z = osm_tile.get_cordination(ngx.var.uri, "", "png")

        -- try renderd file.
        local tilefile = osm_tile.xyz_to_metatile_filename(x, y, z)
        local tilepath = tirex_tilepath.."/"..map.."/"..tilefile
        local png, err = osm_tile.get_tile(tilepath, x, y, z)
        if png then
            ngx.header.content_type = "image/png"
            ngx.print(png)
            return ngx.OK
        end

        -- ask tirex to render it
	locla priority = 1
        local ok = tirex.request(map, x, y, z, z+1, priority)
        if not ok then
            return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
        end

        local png, err = osm_tile.get_tile(tilepath, x, y, z)
        if png then
            ngx.header.content_type = "image/png"
            ngx.print(png)
            return ngx.OK
        end
        return ngx.exit(ngx.HTTP_NOT_FOUND)
    ';
  }
 }
}
